#!/usr/bin/env node

"use strict";

var program       = require('commander'),
    fs            = require('fs'),
    moment        = require('moment'),
    defaultOutput = require('../lib/output/common-output'),
    configOutput  = require('../lib/output/config-output'),
    listOutput    = require('../lib/output/list-output'),
    killOutput    = require('../lib/output/kill-output'),
    Aptrac        = require('aptrac-core');
require('sugar');
require('moment-duration-format');
require('../lib/util/moment-duration-clone');

function handle(task) {
    var options = this;
    if (!(options instanceof program.Command)) {
        console.log("There was a problem parsing the arguments. Please read the help with aptrac [command] -h");
        process.exit(1);
    }
    if (task && Object.isString(task))
        options.task = task;
    else if (task && Object.isArray(task))
        options.task = task.join(' ');

    var o = {
        _default: defaultOutput,
        kill: killOutput,
        list: listOutput,
        set: configOutput,
        unset: configOutput
    };

    var aptrac = new Aptrac(options);
    var fn = aptrac[options._name];

    if (fn && Object.isFunction(fn))
        fn.call(aptrac, options, o[options._name] || o._default);
    else {
        console.log('could not find command with name "%s" on the aptrac api', options._name)
    }
}

function collectKeyValues(val, aliases) {
    aliases = aliases || {};
    var keyvalue = val.split("=");
    aliases[keyvalue[0]] = keyvalue[1];
    return aliases;
}

function collectValues(val, aliases) {
    aliases = aliases || [];
    aliases.push(val);
    return aliases;
}

function collectNumbersList(val) {
    return val.split(',').map(Number);
}

function parseTime(dateTime) {
    var time = moment(dateTime, ['HH:mm', 'DD.MM HH:mm', 'DD.MM.YY HH:mm', 'DD.MM.YYYY HH:mm', 'DD.MM.YYYY HH:mm', 'DD.MM', 'DD.MM.YY', 'DD.MM.YYYY'], true);
    if (!time.isValid()) {
        var date = Date.create(dateTime);
        if (!date.isValid()) {
            console.log("can not parse time");
            process.exit(1);
        }
        time = moment(date);
    }
    return time;
}

program
    .version('0.9.0')
    .description("See help for individual commands with: aptrac <command> --help");

program
    .command('start [task...]')
    .alias('s')
    .description('starts a new task')
    .option("-s, --start <time>", "sets the start time (default: now)", parseTime, moment())
    .option("-n, --note <note>", "personal notes")
    .option("-t, --task <task>", "task description")
    .option("-p, --project <project>", "project for task")
    .option("-c, --config <config>", "name of configuration file", "config")
    .option("--db <db>", "database connection")
    .action(handle);

program
    .command('edit [task...]')
    .alias('ed')
    .description('edits the current running task')
    .option("-s, --start <time>", "sets the start time", parseTime)
    .option("-e, --end <time>", "sets the end time", parseTime)
    .option("-t, --task <task>", "task description")
    .option("-n, --note <note>", "personal notes")
    .option("-p, --project <project>", "project for task")
    .option("-U, --recursive-update", "recursive update tasks if possible")
    .option("-i, --id <id>[, id]", "id's of tasks to edit", collectNumbersList)
    .option("-c, --config <config>", "name of configuration file", "config")
    .option("--db <db>", "database connection")
    .action(handle);

program
    .command('split [task...]')
    .alias('sp')
    .description('splits the given running task')
    .option("-a, --at <time>", "splits at the given time", parseTime)
    .option("-t, --task <task>", "task description")
    .option("-n, --note <note>", "personal notes")
    .option("-p, --project <project>", "project for task")
    .option("-i, --id <id>[, id]", "id's of tasks to edit", collectNumbersList)
    .option("-c, --config <config>", "name of configuration file", "config")
    .option("--db <db>", "database connection")
    .action(handle);

program
    .command('end [task...]')
    .alias('en')
    .description('ends of the current running task')
    .option('-s, --start <time>', "sets the start time", parseTime)
    .option('-e, --end <time>', "sets the end time (default: now)", parseTime, moment())
    .option("-t, --task <task>", "task description")
    .option('-n, --note <note>', 'personal notes')
    .option('-p, --project <project>', 'project for task')
    .option("-c, --config <config>", "name of configuration file", "config")
    .option('--db <db>', 'database connection')
    .action(handle);

program
    .command("kill")
    .alias("k")
    .description("deletes a task with a given id")
    .option("-i, --id <id>", "id of task to delete", Number)
    .option("-c, --config <config>", "name of configuration file", "config")
    .option('--db <db>', 'database connection')
    .action(handle);

program
    .command('return')
    .alias('r')
    .description('returns to the previous active task')
    .option("-s, --start <time>", "sets the start time (default: now)", parseTime, moment())
    .option("-i, --id <id>", "id of task to edit", Number)
    .option("-c, --config <config>", "name of configuration file", "config")
    .action(handle);

program
    .command('list')
    .alias('l')
    .description("displays a set of tasks (default: today's tasks)")
    .option('-f --from <time>', 'time from which to query (default: today 0:00 am)', parseTime)
    .option('-t --to <time>', 'time to which to query (default: today 11:59 pm)', parseTime)
    .option('-w --week', 'show all entries of current week. is partially overwritten by -f and -t')
    .option('-m --month', 'show all entries of current month. is partially overwritten by -f and -t')
    .option('-y --year', 'show all entries of current year. is partially overwritten by -f and -t')
    .option('-l --last', "shows the last unit of the chosen time frame, e.g. -lw for last week. use together with -w -m -y or without -f or -t to get day.")
    .option("-i, --id <id>[, id]", "id's of tasks to list", collectNumbersList)
    .option('-a --all', 'show all entries')
    .option('-S --search <query>', 'search for tasks containing the given query')
    .option('-A --accounting', 'show entries as accumulated list of time spend per project')
    .option('-C --condense', 'condense all entries with the same task into one')
    .option('-W --group-week', 'group the output per week (default: per day)')
    .option('-M --group-month', 'group the output per month (default: per day)')
    .option('-Y --group-year', 'group the output per year (default: per day)')
    .option('-H --hide-empty', 'hide empty columns')
    .option('--db <db>', 'database connection')
    .option("-c, --config <config>", "name of configuration file", "config")
    .option('--db <db>', 'database connection')
    .action(handle);

program
    .command('now')
    .alias('n')
    .option("-c, --config <config>", "name of configuration file", "config")
    .option("--db <db>", "database connection")
    .description('displays the current running task')
    .action(handle);

program
    .command('set')
    .description('sets a config value as default')
    .option("-n, --note <note>", "personal notes")
    .option("-t, --task <task>", "task description")
    .option("-p, --project <project>", "project for task")
    .option("-w, --work-hours <work>", "work hours per day", Number)
    .option("--db <db>", "database connection")
    .option("-a, --alias <key>=<value>", "sets a alias for a arbitrary field", collectKeyValues, {})
    .option("-c, --config <config>", "name of configuration file", "config")
    .action(handle);

program
    .command('unset')
    .description('resets a config value to the default (must be called with options)')
    .option("-n, --note", "personal notes")
    .option("-t, --task", "task description")
    .option("-p, --project", "project for task")
    .option("-w, --work-hours", "work hours per day")
    .option("--db", "database connection")
    .option("-a, --alias <alias>", "database connection", collectValues, [])
    .option("-c, --config <config>", "name of configuration file", "config")
    .action(handle);

program
    .command("completion")
    .description("bash completion script")
    .option("--cmd", "print a list of all commands")
    .option("--op <command>", "print a list of all options for a command")
    .action(function (options) {
        if (options && options.cmd) {
            var cmds = options.parent.commands.map(function (command) {
                return command._name;
            });
            console.log(cmds.join(' '));
        } else if (options && options.op) {
            var filteredCommands = options.parent.commands.filter(function (command) {
                return command._name === options.op;
            });
            var opts = [];
            filteredCommands.forEach(function (command) {
                command.options.forEach(function (option) {
                    opts.add(option.long);
                });
                console.log(opts.join(' '));
            });
        } else {
            var fileName = require.resolve('../util/bash-completion.sh');
            var completionScript = fs.readFileSync(fileName, 'utf8');
            console.log(completionScript);
        }
    });

program.parse(process.argv);