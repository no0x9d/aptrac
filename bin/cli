#!/usr/bin/env node

"use strict";

var create      = require('./../lib/actions/create'),
    edit        = require('./../lib/actions/edit'),
    end         = require('./../lib/actions/end'),
    findCurrent = require('./../lib/actions/findCurrent'),
    findLast    = require('./../lib/actions/findLast'),
    args        = require('./../lib/util/arguments'),
    deserialize = require('./../lib/util/deserialize'),
    init        = require('./../lib/util/init-db'),
    config      = require('./../lib/config/index'),
    columnify   = require('columnify'),
    async       = require('async'),
    program     = require('commander'),
    chalk       = require('chalk'),
    moment      = require('moment'),
    path        = require('path');
require('sugar');
require('moment-duration-format');
require('../lib/util/moment-duration-clone');

function preHandleOptions(options, task) {
    options.task = task;
    if (options.config) {
        var configPath = path.join(config.get('home'), options.config + ".cfg");
        config.addSource(configPath);
    }
}

function handleAliases(options) {
    var aliases = config.get('alias');

    options.options.forEach(function (option) {
        if (option.required !== 0 || option.optional !== 0) {
            var name = option.name();
            var optionValue = options[name];
            if (optionValue) {
                if (Object.isString(optionValue))
                    if (optionValue.startsWith('\\')) {
                        options[name] = optionValue.slice(1);
                    }
                    else {
                        var alias = aliases[optionValue];
                        if (alias) {
                            options[name] = alias;
                        }
                    }
            }
        }
    })
}

function parseTime(dateTime) {
    var time = moment(dateTime, ['HH:mm', 'DD.MM HH:mm', 'DD.MM.YY HH:mm', 'DD.MM', 'DD.MM.YY'], true);
    if (!time.isValid()) {
        var date = Date.create(dateTime);
        if (!date.isValid()) {
            console.log("can not parse time");
            process.exit(1);
        }
        time = moment(date);
    }
    return time;
}

function outputDateHeader(moment) {
    console.log(chalk.blue(moment.format("dddd, D.MM.YYYY")));
}
function outputTaskToConsole(task) {
    outputDateHeader(task.sttart);

    console.log(columnify([{
        id: task._id,
        start: task.start.format('HH:mm'),
        end: task.end ? task.end.format('HH:mm') : '',
        duration: task.duration.format('hh:mm', {trim: false}),
        project: task.project,
        task: task.task,
        note: task.note
    }], {
        columnSplitter: ' | ',
        config: {
            duration: {
                align: 'center'
            }
        }
    }));
}

function outputDays(groupedByDay, options) {
    for (var day in groupedByDay) {
        var duration = moment.duration(0);
        var tasks = groupedByDay[day];

        var outputTasks = [];
        console.log();
        outputDateHeader(moment(new Date(day)));
        if (options && options.condense) {

            var groupedbyTask = tasks.groupBy(function (task) {
                return (task.task || '')
                    + (task.project || '');
            });

            for (var groupedTask in groupedbyTask) {
                var condensedDuration = moment.duration(0);
                groupedbyTask[groupedTask].forEach(function (task) {
                    condensedDuration.add(task.duration);
                    duration.add(task.duration);
                });
                var groupedTaskRepresentant = groupedbyTask[groupedTask][0];
                outputTasks.push({
                    duration: condensedDuration.format('hh:mm', {trim: false}),
                    project: groupedTaskRepresentant.project,
                    task: groupedTaskRepresentant.task,
                    note: groupedTaskRepresentant.note
                });
            }
        }
        else {
            tasks.forEach(function (task) {
                duration.add(task.duration);
                outputTasks.push({
                    id: task._id,
                    start: task.start.format('HH:mm'),
                    end: task.end ? task.end.format('HH:mm') : '',
                    duration: task.duration.format('hh:mm', {trim: false}),
                    project: task.project,
                    task: task.task,
                    note: task.note
                });
            });
        }
        console.log(columnify(outputTasks, {
            columnSplitter: ' | ',
            config: {
                duration: {
                    align: 'center'
                }
            }
        }));
        var rest = duration.clone().subtract(moment.duration(config.get('workHoursPerDay'), 'hours'));
        var restColor = rest.asMilliseconds() < 0 ? chalk.red : chalk.green;
        console.log('---------------------------');
        console.log("duration [h]: %s (%s)", duration.format("HH:mm", {trim: false}), restColor(rest.format("HH:mm", {trim: false})))
    }
}

program
    .version('0.1.0');

program
    .command('start [task]')
    .alias('s')
    .description('starts a new task')
    .option("-s, --start <time>", "sets the start time (default: now)", parseTime, moment())
    .option("-n, --note <note>", "personal notes")
    .option("-t, --task <task>", "task description")
    .option("-p, --project <project>", "project for task")
    .option("-c, --config <config>", "name of configuration file", "config")
    .option("--db <db>", "database connection")
    .action(function (task, options) {
        preHandleOptions(options, task);
        handleAliases(options);
        async.waterfall([
            args.bind(this, options, true),
            findCurrent,
            end,
            create,
            edit,
            findCurrent
        ], function (err, args) {
            if (err) console.log(err);
            else
                outputTaskToConsole(args.task);
        });
    });

program
    .command('edit [task]')
    .alias('ed')
    .description('edits the current running task')
    .option("-s, --start <time>", "sets the start time", parseTime)
    .option("-e, --end <time>", "sets the end time", parseTime)
    .option("-t, --task <task>", "task description")
    .option("-n, --note <note>", "personal notes")
    .option("-p, --project <project>", "project for task")
    .option("-c, --config <config>", "name of configuration file", "config")
    .option("--db <db>", "database connection")
    .action(function (task, options) {
        preHandleOptions(options, task);
        handleAliases(options);
        async.waterfall([
            args.bind(this, options, false),
            findCurrent,
            edit,
            findCurrent
        ], function (err, args) {
            if (err) console.log(err);
            else
                outputTaskToConsole(args.task);
        });
    });

program
    .command('end [task]')
    .alias('en')
    .description('ends of the current running task')
    .option('-s, --start <time>', "sets the start time", parseTime)
    .option('-e, --end <time>', "sets the end time (default: now)", parseTime, moment())
    .option("-t, --task <task>", "task description")
    .option('-n, --note <note>', 'personal notes')
    .option('-p, --project <project>', 'project for task')
    .option("-c, --config <config>", "name of configuration file", "config")
    .option('--db <db>', 'database connection')
    .action(function (task, options) {
        "use strict";
        preHandleOptions(options, task);
        handleAliases(options);
        async.waterfall([
            args.bind(this, options, false),
            findCurrent,
            edit,
            findCurrent,
            end,
            findLast
        ], function (err, args) {
            if (err) console.log(err);
            else
                outputTaskToConsole(args.task);
        });
    });

program
    .command('return')
    .alias('r')
    .description('returns to the previous active task')
    .option("-s, --start <time>", "sets the start time (default: now)", parseTime, moment())
    .option("-c, --config <config>", "name of configuration file", "config")
    .action(function (options) {
        preHandleOptions(options);
        handleAliases(options);
        async.waterfall([
                args.bind(this, false, options),
                findLast,
                // update changes from found task
                function (args, done) {
                    args.changes.task = args.task.task;
                    args.changes.project = args.project;
                    args.changes.note = args.note;
                    done(null, args)
                },
                findCurrent,
                end,
                create,
                edit,
                findCurrent
            ], function (err, args) {
                if (err) console.log(err);
                else
                    outputTaskToConsole(args.task);
            }
        )
    });

program
    .command('list')
    .alias('l')
    .description("displays a set of tasks (default: today's tasks)")
    .option('-f --from <time>', 'time from which to query (default: today 0:00 am)', parseTime, moment().startOf('day'))
    .option('-t --to <time>', 'time from which to query (default: today 11:59 pm)', parseTime, moment().endOf('day'))
    .option('-y --yesterday', "show yesterday's entries")
    .option('-w --week', 'show all entries of current week')
    .option('-m --month', 'show all entries of current month')
    .option('-a --all', 'show all entries')
    .option('-C --condense', 'condense all entries with the same task into one')
    .option('--db <db>', 'database connection')
    .option("-c, --config <config>", "name of configuration file", "config")
    .option('--db <db>', 'database connection')
    .action(function (options) {
        "use strict";
        preHandleOptions(options);
        handleAliases(options);

        // handle option flags and set 'from' & 'to'
        if (options.yesterday) {
            options.from = moment().subtract(1, 'day').startOf('day');
            options.to = moment().subtract(1, 'day').endOf('day');
        }
        if (options.week) {
            options.from = moment().startOf('week');
            options.to = moment().endOf('week');
        }
        if (options.month) {
            options.from = moment().startOf('month');
            options.to = moment().endOf('month');
        }

        // build query
        var query;
        if (options.all) {
            query = {start: {$exists: true}};
        } else {
            query = {$and: [{start: {$gt: options.from.toDate()}}, {start: {$lt: options.to.toDate()}}]}
        }

        var db = init(options);
        db.find(query)
            .sort({start: 1})
            .exec(function (err, tasks) {
                if (err) {
                    console.log("could not load tasks");
                    console.log(err);
                    return;
                }

                tasks.forEach(function (task) {
                    deserialize(task);
                });


                var groupedByDay = tasks.groupBy(function (task) {
                    var day = task.start.clone();
                    return day.startOf('day');
                });

                // output
                outputDays(groupedByDay, options);
            });
    });
program
    .command('now')
    .alias('n')
    .option("-c, --config <config>", "name of configuration file", "config")
    .option("--db <db>", "database connection")
    .description('displays the current running task')
    .action(function (options) {
        "use strict";
        preHandleOptions(options);

        async.waterfall([
            args.bind(this, options, false),
            findCurrent
        ], function (err, args) {
            if (err) console.log(err);
            else if (args.task)
            outputTaskToConsole(args.task);
        });
    });

function collectKeyValues(val, aliases) {
    var keyvalue = val.split("=");
    aliases[keyvalue[0]] = keyvalue[1];
    return aliases;
}

function logConfigToConsole(config) {
    var output = {};
    config.sources.forEach(function (source) {
        Object.merge(output, source, true);
    });
    console.log(output);
}

function makeDBPathAbsolute(pathToDB) {
    if (pathToDB.startsWith("~home")) {
        pathToDB = path.join(config.get('home'), pathToDB.slice(5))
    }
    else if (pathToDB.startsWith("~")) {
        pathToDB = path.join(config.get('userhome'), pathToDB.slice(1))
    }
    return path.resolve(pathToDB);
}

program
    .command('set')
    .description('sets a config value as default')
    .option("-n, --note <note>", "personal notes")
    .option("-t, --task <task>", "task description")
    .option("-p, --project <project>", "project for task")
    .option("--db <db>", "database connection", makeDBPathAbsolute)
    .option("-a, --alias <key>=<value>", "sets a alias for a arbitrary field", collectKeyValues, {})
    .option("-c, --config <config>", "name of configuration file", "config")
    .action(function (options) {
        "use strict";

        preHandleOptions(options);

        var default_args = ["project", "note", "task", "db", "alias"];

        var copyOptions = function (options, copyBase, args) {
            "use strict";

            args = args || default_args;
            args.forEach(function (option) {
                if (options[option])
                    copyBase[option] = options[option];
            });

            return copyBase;
        };
        var setValues = copyOptions(options, {});
        config.set(setValues);
        logConfigToConsole(config);
    });

program
    .command('unset')
    .description('resets a config value to the default (must be called with options)')
    .option("-n, --note", "personal notes")
    .option("-t, --task", "task description")
    .option("-p, --project", "project for task")
    .option("--db", "database connection")
    .option("-c, --config <config>", "name of configuration file", "config")
    .action(function (options) {
        "use strict";
        preHandleOptions(options);
        var default_args = ["project", "note", "task", "db"];

        var copyOptions = function (options, copyBase, args) {
            "use strict";

            args = args || default_args;
            args.forEach(function (option) {
                if (options[option])
                    copyBase.push(option);
            });

            return copyBase;
        };
        var setValues = copyOptions(options, []);
        config.unset(setValues);
        logConfigToConsole(config)
    });

program.parse(process.argv);