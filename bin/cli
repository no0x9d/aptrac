#!/usr/bin/env node

"use strict";

var args          = require('./../lib/util/arguments'),
    config        = require('./../lib/config/index'),
    program       = require('commander'),
    moment        = require('moment'),
    path          = require('path'),
    aptrac        = require('./../lib/aptrac');
require('sugar');
require('moment-duration-format');
require('../lib/util/moment-duration-clone');

function collectKeyValues(val, aliases) {
    aliases = aliases || {};
    var keyvalue = val.split("=");
    aliases[keyvalue[0]] = keyvalue[1];
    return aliases;
}

function makeDBPathAbsolute(pathToDB) {
    if (pathToDB.startsWith("$home")) {
        pathToDB = path.join(config.get('home'), pathToDB.slice(5))
    }
    else if (pathToDB.startsWith("~")) {
        pathToDB = path.join(config.get('userhome'), pathToDB.slice(1))
    }
    return path.resolve(pathToDB);
}

function collectValues(val, aliases) {
    aliases = aliases || [];
    aliases.push(val);
    return aliases;
}

function parseTime(dateTime) {
    var time = moment(dateTime, ['HH:mm', 'DD.MM HH:mm', 'DD.MM.YY HH:mm', 'DD.MM', 'DD.MM.YY'], true);
    if (!time.isValid()) {
        var date = Date.create(dateTime);
        if (!date.isValid()) {
            console.log("can not parse time");
            process.exit(1);
        }
        time = moment(date);
    }
    return time;
}

program
    .version('0.9.0');

program
    .command('start [task]')
    .alias('s')
    .description('starts a new task')
    .option("-s, --start <time>", "sets the start time (default: now)", parseTime, moment())
    .option("-n, --note <note>", "personal notes")
    .option("-t, --task <task>", "task description")
    .option("-p, --project <project>", "project for task")
    .option("-c, --config <config>", "name of configuration file", "config")
    .option("--db <db>", "database connection")
    .action(aptrac.start);

program
    .command('edit [task]')
    .alias('ed')
    .description('edits the current running task')
    .option("-s, --start <time>", "sets the start time", parseTime)
    .option("-e, --end <time>", "sets the end time", parseTime)
    .option("-t, --task <task>", "task description")
    .option("-n, --note <note>", "personal notes")
    .option("-p, --project <project>", "project for task")
    .option("-i, --id <id>", "id of task to edit", Number)
    .option("-c, --config <config>", "name of configuration file", "config")
    .option("--db <db>", "database connection")
    .action(aptrac.edit);

program
    .command('end [task]')
    .alias('en')
    .description('ends of the current running task')
    .option('-s, --start <time>', "sets the start time", parseTime)
    .option('-e, --end <time>', "sets the end time (default: now)", parseTime, moment())
    .option("-t, --task <task>", "task description")
    .option('-n, --note <note>', 'personal notes')
    .option('-p, --project <project>', 'project for task')
    .option("-c, --config <config>", "name of configuration file", "config")
    .option('--db <db>', 'database connection')
    .action(aptrac.end);

program
    .command("kill")
    .alias("k")
    .description("deletes a task with a given id")
    .option("-i, --id <id>", "id of task to edit", Number)
    .option("-c, --config <config>", "name of configuration file", "config")
    .option('--db <db>', 'database connection')
    .action(aptrac.kill);

program
    .command('return')
    .alias('r')
    .description('returns to the previous active task')
    .option("-s, --start <time>", "sets the start time (default: now)", parseTime, moment())
    .option("-c, --config <config>", "name of configuration file", "config")
    .action(aptrac.return);

program
    .command('list')
    .alias('l')
    .description("displays a set of tasks (default: today's tasks)")
    .option('-f --from <time>', 'time from which to query (default: today 0:00 am)', parseTime, moment().startOf('day'))
    .option('-t --to <time>', 'time from which to query (default: today 11:59 pm)', parseTime, moment().endOf('day'))
    .option('-y --yesterday', "show yesterday's entries")
    .option('-w --week', 'show all entries of current week')
    .option('-m --month', 'show all entries of current month')
    .option('-a --all', 'show all entries')
    .option('-C --condense', 'condense all entries with the same task into one')
    .option('--db <db>', 'database connection')
    .option("-c, --config <config>", "name of configuration file", "config")
    .option('--db <db>', 'database connection')
    .action(aptrac.list);

program
    .command('now')
    .alias('n')
    .option("-c, --config <config>", "name of configuration file", "config")
    .option("--db <db>", "database connection")
    .description('displays the current running task')
    .action(aptrac.now);

program
    .command('set')
    .description('sets a config value as default')
    .option("-n, --note <note>", "personal notes")
    .option("-t, --task <task>", "task description")
    .option("-p, --project <project>", "project for task")
    .option("-w, --work-hours <work>", "work hours per day", Number)
    .option("--db <db>", "database connection", makeDBPathAbsolute)
    .option("-a, --alias <key>=<value>", "sets a alias for a arbitrary field", collectKeyValues, {})
    .option("-c, --config <config>", "name of configuration file", "config")
    .action(aptrac.set);

program
    .command('unset')
    .description('resets a config value to the default (must be called with options)')
    .option("-n, --note", "personal notes")
    .option("-t, --task", "task description")
    .option("-p, --project", "project for task")
    .option("-w, --work-hours", "work hours per day")
    .option("--db", "database connection")
    .option("-a, --alias <alias>", "database connection", collectValues, [])
    .option("-c, --config <config>", "name of configuration file", "config")
    .action(aptrac.unset);

program.parse(process.argv);